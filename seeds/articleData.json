[
    {
        "title": "MySQL",
        "content": "Since MySQL 8.0.30, the Dynamic InnoDB Redo Log is a new feature that allows users to resize the redo log files on the fly without the need for a restart. This is a significant improvement over previous versions of MySQL, where the redo log files had to be manually resized and the database had to be restarted in order for the changes to take effect. An undersized Redo Log Capacity is problematic and lead to performance issues.",
        "user_id": "1"
    },
    {
        "title": "GraphQL",
        "content": "We are very happy to announce the official home for contributed GraphQL custom scalar specifications at scalars.graphql.org. You are welcome to contribute custom scalar specifications (abbreviated as "specs"). Once your spec is merged in, it will be hosted at scalars.graphql.org/<GitHub-username>/<specification-name>. See how to contribute on the contribution guide. ",
        "user_id": "2"
    },
    {
        "title": "Node",
        "content": "Async/await in Node.js opens up a host of powerful design patterns. Tasks that used to take complex libraries or intricate promise chaining can now be done with rudimentary if statements and for loops. I already wrote about these kind of design patterns with co, but async/await makes these patterns accessible in vanilla Node.js, no outside libraries required.",
        "user_id": "3"    
    },
    {
        "title": "MongoDB",
        "content": "Introducing MongoDB Atlas Connector for Power BI, the certified solution that facilitates real-time insights on your Atlas data directly in the Power BI interfaces that analysts know and love! Supporting Microsoft’s Intelligent Data Platform, this integration bridges the gap between Developers and Analytics teams, allowing analysts who rely on Power BI for insights to natively transform, analyze, and share dashboards that incorporate live MongoDB Atlas data.",
        "user_id": "4"    
    },
    {
        "title": "Express JS",
        "content": "Express provides a built-in middleware express.static to serve static files, such as images, CSS, JavaScript, etc. You simply need to pass the name of the directory where you keep your static assets, to the express.static middleware to start serving the files directly. For example, if you keep your images, CSS, and JavaScript files in a directory named public, you can do this − ",
        "user_id": "5"    
    },
    {
        "title": "React",
        "content": "Suspense lets you specify what to display on the screen while the data or code for your components is still being loaded. This lets your users progressively see more content while the page is loading as well as during the router navigations that load more data and code. However, from the user’s perspective, data loading and rendering do not tell the whole story when considering whether new content is ready. By default, browsers load stylesheets, fonts, and images independently, which can lead to UI jumps and consecutive layout shifts.",
        "user_id": "1"     
    },
    {
        "title": "Angular",
        "content": "Duration and delay are expressed as a number and optional time unit, such as "1s" or "10ms" for one second and 10 milliseconds, respectively. The default unit is milliseconds.",
        "user_id": "2"     
    }
  ]